//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;

namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The OpcSection Configuration Section.
    /// </summary>
    public partial class OpcSection : System.Configuration.ConfigurationSection
    {
        /// <summary>
        /// The XML name of the OpcSection Configuration Section.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OpcSectionSectionName = "opcSection";
        
        /// <summary>
        /// Gets the OpcSection instance.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static OpcSection Instance
        {
            get
            {
                return ((OpcSection)(ConfigurationManager.GetSection(OpcSectionSectionName)));
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [ConfigurationProperty(XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[XmlnsPropertyName]));
            }
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="OpcGroups"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OpcGroupsPropertyName = "opcGroups";
        
        /// <summary>
        /// Gets or sets the OpcGroups.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The OpcGroups.")]
        [ConfigurationProperty(OpcGroupsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual OpcGroupElementCollection OpcGroups
        {
            get
            {
                return ((OpcGroupElementCollection)(base[OpcGroupsPropertyName]));
            }
            set
            {
                base[OpcGroupsPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The OpcGroupElement Configuration Element.
    /// </summary>
    public partial class OpcGroupElement : ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Id.")]
        [ConfigurationProperty(IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[IdPropertyName]));
            }
            set
            {
                base[IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="ReadWriteType"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ReadWriteTypePropertyName = "readWriteType";
        
        /// <summary>
        /// Gets or sets the ReadWriteType.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The ReadWriteType.")]
        [ConfigurationProperty(ReadWriteTypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ReadWriteType
        {
            get
            {
                return ((string)(base[ReadWriteTypePropertyName]));
            }
            set
            {
                base[ReadWriteTypePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="SyncType"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SyncTypePropertyName = "syncType";
        
        /// <summary>
        /// Gets or sets the SyncType.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The SyncType.")]
        [ConfigurationProperty(SyncTypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string SyncType
        {
            get
            {
                return ((string)(base[SyncTypePropertyName]));
            }
            set
            {
                base[SyncTypePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="DeviceCode"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DeviceCodePropertyName = "deviceCode";
        
        /// <summary>
        /// Gets or sets the DeviceCode.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The DeviceCode.")]
        [ConfigurationProperty(DeviceCodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string DeviceCode
        {
            get
            {
                return ((string)(base[DeviceCodePropertyName]));
            }
            set
            {
                base[DeviceCodePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Protocal"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProtocalPropertyName = "protocal";
        
        /// <summary>
        /// Gets or sets the Protocal.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Protocal.")]
        [ConfigurationProperty(ProtocalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Protocal
        {
            get
            {
                return ((string)(base[ProtocalPropertyName]));
            }
            set
            {
                base[ProtocalPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="ActiceStatus"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ActiceStatusPropertyName = "acticeStatus";
        
        /// <summary>
        /// Gets or sets the ActiceStatus.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The ActiceStatus.")]
        [ConfigurationProperty(ActiceStatusPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool ActiceStatus
        {
            get
            {
                return ((bool)(base[ActiceStatusPropertyName]));
            }
            set
            {
                base[ActiceStatusPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="ConnectionName"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectionNamePropertyName = "connectionName";
        
        /// <summary>
        /// Gets or sets the ConnectionName.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The ConnectionName.")]
        [ConfigurationProperty(ConnectionNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ConnectionName
        {
            get
            {
                return ((string)(base[ConnectionNamePropertyName]));
            }
            set
            {
                base[ConnectionNamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="StorageDb"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StorageDbPropertyName = "storageDb";
        
        /// <summary>
        /// Gets or sets the StorageDb.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The StorageDb.")]
        [ConfigurationProperty(StorageDbPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string StorageDb
        {
            get
            {
                return ((string)(base[StorageDbPropertyName]));
            }
            set
            {
                base[StorageDbPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="StartAddress"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StartAddressPropertyName = "startAddress";
        
        /// <summary>
        /// Gets or sets the StartAddress.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The StartAddress.")]
        [ConfigurationProperty(StartAddressPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string StartAddress
        {
            get
            {
                return ((string)(base[StartAddressPropertyName]));
            }
            set
            {
                base[StartAddressPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="UpdateRateSetting"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UpdateRateSettingPropertyName = "updateRateSetting";
        
        /// <summary>
        /// Gets or sets the UpdateRateSetting.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The UpdateRateSetting.")]
        [ConfigurationProperty(UpdateRateSettingPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int UpdateRateSetting
        {
            get
            {
                return ((int)(base[UpdateRateSettingPropertyName]));
            }
            set
            {
                base[UpdateRateSettingPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="OpcItems"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OpcItemsPropertyName = "opcItems";
        
        /// <summary>
        /// Gets or sets the OpcItems.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The OpcItems.")]
        [ConfigurationProperty(OpcItemsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual OpcItemElementCollection OpcItems
        {
            get
            {
                return ((OpcItemElementCollection)(base[OpcItemsPropertyName]));
            }
            set
            {
                base[OpcItemsPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// A collection of OpcGroupElement instances.
    /// </summary>
    [ConfigurationCollection(typeof(OpcGroupElement), CollectionType=ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=OpcGroupElementPropertyName)]
    public partial class OpcGroupElementCollection : ConfigurationElementCollection
    {
        /// <summary>
        /// The XML name of the individual <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> instances in this collection.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OpcGroupElementPropertyName = "opcGroupElement";

        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return OpcGroupElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == OpcGroupElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((OpcGroupElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new OpcGroupElement();
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public OpcGroupElement this[int index]
        {
            get
            {
                return ((OpcGroupElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public OpcGroupElement this[object id]
        {
            get
            {
                return ((OpcGroupElement)(base.BaseGet(id)));
            }
        }

        /// <summary>
        /// Adds the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="opcGroupElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> to add.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(OpcGroupElement opcGroupElement)
        {
            base.BaseAdd(opcGroupElement);
        }

        /// <summary>
        /// Removes the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="opcGroupElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> to remove.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(OpcGroupElement opcGroupElement)
        {
            base.BaseRemove(this.GetElementKey(opcGroupElement));
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public OpcGroupElement GetItemAt(int index)
        {
            return ((OpcGroupElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcGroupElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public OpcGroupElement GetItemByKey(string id)
        {
            return ((OpcGroupElement)(base.BaseGet(((object)(id)))));
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// A collection of OpcItemElement instances.
    /// </summary>
    [ConfigurationCollection(typeof(OpcItemElement), CollectionType=ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=OpcItemElementPropertyName)]
    public partial class OpcItemElementCollection : ConfigurationElementCollection
    {
        /// <summary>
        /// The XML name of the individual <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> instances in this collection.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OpcItemElementPropertyName = "opcItemElement";

        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return OpcItemElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == OpcItemElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((OpcItemElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new OpcItemElement();
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public OpcItemElement this[int index]
        {
            get
            {
                return ((OpcItemElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public OpcItemElement this[object id]
        {
            get
            {
                return ((OpcItemElement)(base.BaseGet(id)));
            }
        }

        /// <summary>
        /// Adds the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="opcItemElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> to add.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(OpcItemElement opcItemElement)
        {
            base.BaseAdd(opcItemElement);
        }

        /// <summary>
        /// Removes the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="opcItemElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> to remove.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(OpcItemElement opcItemElement)
        {
            base.BaseRemove(this.GetElementKey(opcItemElement));
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public OpcItemElement GetItemAt(int index)
        {
            return ((OpcItemElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.OpcItemElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public OpcItemElement GetItemByKey(string id)
        {
            return ((OpcItemElement)(base.BaseGet(((object)(id)))));
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The OpcItemElement Configuration Element.
    /// </summary>
    public partial class OpcItemElement : ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Id.")]
        [ConfigurationProperty(IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[IdPropertyName]));
            }
            set
            {
                base[IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="OppositeAddress"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OppositeAddressPropertyName = "oppositeAddress";
        
        /// <summary>
        /// Gets or sets the OppositeAddress.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The OppositeAddress.")]
        [ConfigurationProperty(OppositeAddressPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string OppositeAddress
        {
            get
            {
                return ((string)(base[OppositeAddressPropertyName]));
            }
            set
            {
                base[OppositeAddressPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="DataType"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DataTypePropertyName = "dataType";
        
        /// <summary>
        /// Gets or sets the DataType.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The DataType.")]
        [ConfigurationProperty(DataTypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string DataType
        {
            get
            {
                return ((string)(base[DataTypePropertyName]));
            }
            set
            {
                base[DataTypePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="DataTypeChar"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DataTypeCharPropertyName = "dataTypeChar";
        
        /// <summary>
        /// Gets or sets the DataTypeChar.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The DataTypeChar.")]
        [ConfigurationProperty(DataTypeCharPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string DataTypeChar
        {
            get
            {
                return ((string)(base[DataTypeCharPropertyName]));
            }
            set
            {
                base[DataTypeCharPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="DataLength"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DataLengthPropertyName = "dataLength";
        
        /// <summary>
        /// Gets or sets the DataLength.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The DataLength.")]
        [ConfigurationProperty(DataLengthPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int DataLength
        {
            get
            {
                return ((int)(base[DataLengthPropertyName]));
            }
            set
            {
                base[DataLengthPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="AlarmFlag"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AlarmFlagPropertyName = "alarmFlag";
        
        /// <summary>
        /// Gets or sets the AlarmFlag.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The AlarmFlag.")]
        [ConfigurationProperty(AlarmFlagPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool AlarmFlag
        {
            get
            {
                return ((bool)(base[AlarmFlagPropertyName]));
            }
            set
            {
                base[AlarmFlagPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="AlarmCode"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AlarmCodePropertyName = "alarmCode";
        
        /// <summary>
        /// Gets or sets the AlarmCode.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The AlarmCode.")]
        [ConfigurationProperty(AlarmCodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string AlarmCode
        {
            get
            {
                return ((string)(base[AlarmCodePropertyName]));
            }
            set
            {
                base[AlarmCodePropertyName] = value;
            }
        }
    }
}
