//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;

namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The ScsSection Configuration Section.
    /// </summary>
    public partial class ScsSection : System.Configuration.ConfigurationSection
    {
        /// <summary>
        /// The XML name of the ScsSection Configuration Section.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ScsSectionSectionName = "scsSection";
        
        /// <summary>
        /// Gets the ScsSection instance.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static ScsSection Instance
        {
            get
            {
                return ((ScsSection)(ConfigurationManager.GetSection(ScsSectionSectionName)));
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [ConfigurationProperty(XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[XmlnsPropertyName]));
            }
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="ScsBodys"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ScsBodysPropertyName = "scsBodys";
        
        /// <summary>
        /// Gets or sets the ScsBodys.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The ScsBodys.")]
        [ConfigurationProperty(ScsBodysPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual ScsBodyElementCollection ScsBodys
        {
            get
            {
                return ((ScsBodyElementCollection)(base[ScsBodysPropertyName]));
            }
            set
            {
                base[ScsBodysPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The ScsBodyElement Configuration Element.
    /// </summary>
    public partial class ScsBodyElement : ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Id.")]
        [ConfigurationProperty(IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[IdPropertyName]));
            }
            set
            {
                base[IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Name.")]
        [ConfigurationProperty(NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[NamePropertyName]));
            }
            set
            {
                base[NamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Description"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DescriptionPropertyName = "description";
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Description.")]
        [ConfigurationProperty(DescriptionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Description
        {
            get
            {
                return ((string)(base[DescriptionPropertyName]));
            }
            set
            {
                base[DescriptionPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Length"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LengthPropertyName = "length";
        
        /// <summary>
        /// Gets or sets the Length.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Length.")]
        [ConfigurationProperty(LengthPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int Length
        {
            get
            {
                return ((int)(base[LengthPropertyName]));
            }
            set
            {
                base[LengthPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="ScsBodyFields"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ScsBodyFieldsPropertyName = "scsBodyFields";
        
        /// <summary>
        /// Gets or sets the ScsBodyFields.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The ScsBodyFields.")]
        [ConfigurationProperty(ScsBodyFieldsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual ScsBodyFieldElementCollection ScsBodyFields
        {
            get
            {
                return ((ScsBodyFieldElementCollection)(base[ScsBodyFieldsPropertyName]));
            }
            set
            {
                base[ScsBodyFieldsPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// A collection of ScsBodyElement instances.
    /// </summary>
    [ConfigurationCollection(typeof(ScsBodyElement), CollectionType=ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=ScsBodyElementPropertyName)]
    public partial class ScsBodyElementCollection : ConfigurationElementCollection
    {
        /// <summary>
        /// The XML name of the individual <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> instances in this collection.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ScsBodyElementPropertyName = "scsBodyElement";

        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return ScsBodyElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == ScsBodyElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((ScsBodyElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new ScsBodyElement();
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ScsBodyElement this[int index]
        {
            get
            {
                return ((ScsBodyElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ScsBodyElement this[object id]
        {
            get
            {
                return ((ScsBodyElement)(base.BaseGet(id)));
            }
        }

        /// <summary>
        /// Adds the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="scsBodyElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> to add.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(ScsBodyElement scsBodyElement)
        {
            base.BaseAdd(scsBodyElement);
        }

        /// <summary>
        /// Removes the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="scsBodyElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> to remove.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(ScsBodyElement scsBodyElement)
        {
            base.BaseRemove(this.GetElementKey(scsBodyElement));
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ScsBodyElement GetItemAt(int index)
        {
            return ((ScsBodyElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ScsBodyElement GetItemByKey(string id)
        {
            return ((ScsBodyElement)(base.BaseGet(((object)(id)))));
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// A collection of ScsBodyFieldElement instances.
    /// </summary>
    [ConfigurationCollection(typeof(ScsBodyFieldElement), CollectionType=ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=ScsBodyFieldElementPropertyName)]
    public partial class ScsBodyFieldElementCollection : ConfigurationElementCollection
    {
        /// <summary>
        /// The XML name of the individual <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> instances in this collection.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ScsBodyFieldElementPropertyName = "scsBodyFieldElement";

        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return ScsBodyFieldElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == ScsBodyFieldElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((ScsBodyFieldElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new ScsBodyFieldElement();
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ScsBodyFieldElement this[int index]
        {
            get
            {
                return ((ScsBodyFieldElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ScsBodyFieldElement this[object id]
        {
            get
            {
                return ((ScsBodyFieldElement)(base.BaseGet(id)));
            }
        }

        /// <summary>
        /// Adds the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="scsBodyFieldElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> to add.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(ScsBodyFieldElement scsBodyFieldElement)
        {
            base.BaseAdd(scsBodyFieldElement);
        }

        /// <summary>
        /// Removes the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="scsBodyFieldElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> to remove.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(ScsBodyFieldElement scsBodyFieldElement)
        {
            base.BaseRemove(this.GetElementKey(scsBodyFieldElement));
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ScsBodyFieldElement GetItemAt(int index)
        {
            return ((ScsBodyFieldElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ScsBodyFieldElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ScsBodyFieldElement GetItemByKey(string id)
        {
            return ((ScsBodyFieldElement)(base.BaseGet(((object)(id)))));
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The ScsBodyFieldElement Configuration Element.
    /// </summary>
    public partial class ScsBodyFieldElement : ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Id.")]
        [ConfigurationProperty(IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[IdPropertyName]));
            }
            set
            {
                base[IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Type.")]
        [ConfigurationProperty(TypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[TypePropertyName]));
            }
            set
            {
                base[TypePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="StartAddress"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StartAddressPropertyName = "startAddress";
        
        /// <summary>
        /// Gets or sets the StartAddress.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The StartAddress.")]
        [ConfigurationProperty(StartAddressPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int StartAddress
        {
            get
            {
                return ((int)(base[StartAddressPropertyName]));
            }
            set
            {
                base[StartAddressPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Length"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LengthPropertyName = "length";
        
        /// <summary>
        /// Gets or sets the Length.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Length.")]
        [ConfigurationProperty(LengthPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int Length
        {
            get
            {
                return ((int)(base[LengthPropertyName]));
            }
            set
            {
                base[LengthPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="SequenceNo"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SequenceNoPropertyName = "sequenceNo";
        
        /// <summary>
        /// Gets or sets the SequenceNo.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The SequenceNo.")]
        [ConfigurationProperty(SequenceNoPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int SequenceNo
        {
            get
            {
                return ((int)(base[SequenceNoPropertyName]));
            }
            set
            {
                base[SequenceNoPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="MapName"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MapNamePropertyName = "mapName";
        
        /// <summary>
        /// Gets or sets the MapName.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The MapName.")]
        [ConfigurationProperty(MapNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string MapName
        {
            get
            {
                return ((string)(base[MapNamePropertyName]));
            }
            set
            {
                base[MapNamePropertyName] = value;
            }
        }
    }
}
