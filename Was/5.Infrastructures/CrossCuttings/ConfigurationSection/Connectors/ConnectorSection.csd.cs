//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;

namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The ConnectorSection Configuration Section.
    /// </summary>
    public partial class ConnectorSection : System.Configuration.ConfigurationSection
    {
        /// <summary>
        /// The XML name of the ConnectorSection Configuration Section.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectorSectionSectionName = "connectorSection";
        
        /// <summary>
        /// Gets the ConnectorSection instance.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static ConnectorSection Instance
        {
            get
            {
                return ((ConnectorSection)(ConfigurationManager.GetSection(ConnectorSectionSectionName)));
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [ConfigurationProperty(XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[XmlnsPropertyName]));
            }
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Connectors"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectorsPropertyName = "connectors";
        
        /// <summary>
        /// Gets or sets the Connectors.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Connectors.")]
        [ConfigurationProperty(ConnectorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual ConnectorElementCollection Connectors
        {
            get
            {
                return ((ConnectorElementCollection)(base[ConnectorsPropertyName]));
            }
            set
            {
                base[ConnectorsPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The ConnectorElement Configuration Element.
    /// </summary>
    public partial class ConnectorElement : ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Id.")]
        [ConfigurationProperty(IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[IdPropertyName]));
            }
            set
            {
                base[IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Name.")]
        [ConfigurationProperty(NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[NamePropertyName]));
            }
            set
            {
                base[NamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Code"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CodePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the Code.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Code.")]
        [ConfigurationProperty(CodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Code
        {
            get
            {
                return ((string)(base[CodePropertyName]));
            }
            set
            {
                base[CodePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Description"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DescriptionPropertyName = "description";
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Description.")]
        [ConfigurationProperty(DescriptionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Description
        {
            get
            {
                return ((string)(base[DescriptionPropertyName]));
            }
            set
            {
                base[DescriptionPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="StartupType"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StartupTypePropertyName = "startupType";
        
        /// <summary>
        /// Gets or sets the StartupType.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The StartupType.")]
        [ConfigurationProperty(StartupTypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual StartupType StartupType
        {
            get
            {
                return ((StartupType)(base[StartupTypePropertyName]));
            }
            set
            {
                base[StartupTypePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="StartSequence"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StartSequencePropertyName = "startSequence";
        
        /// <summary>
        /// Gets or sets the StartSequence.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The StartSequence.")]
        [ConfigurationProperty(StartSequencePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int StartSequence
        {
            get
            {
                return ((int)(base[StartSequencePropertyName]));
            }
            set
            {
                base[StartSequencePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="StopSequence"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StopSequencePropertyName = "stopSequence";
        
        /// <summary>
        /// Gets or sets the StopSequence.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The StopSequence.")]
        [ConfigurationProperty(StopSequencePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int StopSequence
        {
            get
            {
                return ((int)(base[StopSequencePropertyName]));
            }
            set
            {
                base[StopSequencePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="LogName"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LogNamePropertyName = "logName";
        
        /// <summary>
        /// Gets or sets the LogName.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The LogName.")]
        [ConfigurationProperty(LogNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string LogName
        {
            get
            {
                return ((string)(base[LogNamePropertyName]));
            }
            set
            {
                base[LogNamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Type.")]
        [TypeConverter(typeof(TypeNameConverter))]
        [ConfigurationProperty(TypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual Type Type
        {
            get
            {
                return ((Type)(base[TypePropertyName]));
            }
            set
            {
                base[TypePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="TimMessageLength"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TimMessageLengthPropertyName = "timMessageLength";
        
        /// <summary>
        /// Gets or sets the TimMessageLength.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The TimMessageLength.")]
        [ConfigurationProperty(TimMessageLengthPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int TimMessageLength
        {
            get
            {
                return ((int)(base[TimMessageLengthPropertyName]));
            }
            set
            {
                base[TimMessageLengthPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="TimType"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TimTypePropertyName = "timType";
        
        /// <summary>
        /// Gets or sets the TimType.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The TimType.")]
        [ConfigurationProperty(TimTypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string TimType
        {
            get
            {
                return ((string)(base[TimTypePropertyName]));
            }
            set
            {
                base[TimTypePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Connection"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectionPropertyName = "connection";
        
        /// <summary>
        /// Gets or sets the Connection.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Connection.")]
        [ConfigurationProperty(ConnectionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual ConnectionElement Connection
        {
            get
            {
                return ((ConnectionElement)(base[ConnectionPropertyName]));
            }
            set
            {
                base[ConnectionPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// A collection of ConnectorElement instances.
    /// </summary>
    [ConfigurationCollection(typeof(ConnectorElement), CollectionType=ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=ConnectorElementPropertyName)]
    public partial class ConnectorElementCollection : ConfigurationElementCollection
    {
        /// <summary>
        /// The XML name of the individual <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> instances in this collection.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectorElementPropertyName = "connectorElement";

        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return ConnectorElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == ConnectorElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((ConnectorElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new ConnectorElement();
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ConnectorElement this[int index]
        {
            get
            {
                return ((ConnectorElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ConnectorElement this[object id]
        {
            get
            {
                return ((ConnectorElement)(base.BaseGet(id)));
            }
        }

        /// <summary>
        /// Adds the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="connectorElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> to add.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(ConnectorElement connectorElement)
        {
            base.BaseAdd(connectorElement);
        }

        /// <summary>
        /// Removes the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="connectorElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> to remove.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(ConnectorElement connectorElement)
        {
            base.BaseRemove(this.GetElementKey(connectorElement));
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ConnectorElement GetItemAt(int index)
        {
            return ((ConnectorElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.Connectors.ConnectorElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public ConnectorElement GetItemByKey(string id)
        {
            return ((ConnectorElement)(base.BaseGet(((object)(id)))));
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The ConnectionInformationElement Configuration Element.
    /// </summary>
    public partial class ConnectionInformationElement : ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Id.")]
        [ConfigurationProperty(IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[IdPropertyName]));
            }
            set
            {
                base[IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Name.")]
        [ConfigurationProperty(NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[NamePropertyName]));
            }
            set
            {
                base[NamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Node"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NodePropertyName = "node";
        
        /// <summary>
        /// Gets or sets the Node.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Node.")]
        [ConfigurationProperty(NodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Node
        {
            get
            {
                return ((string)(base[NodePropertyName]));
            }
            set
            {
                base[NodePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Ip"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IpPropertyName = "ip";
        
        /// <summary>
        /// Gets or sets the Ip.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Ip.")]
        [ConfigurationProperty(IpPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Ip
        {
            get
            {
                return ((string)(base[IpPropertyName]));
            }
            set
            {
                base[IpPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the Port.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Port.")]
        [ConfigurationProperty(PortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[PortPropertyName]));
            }
            set
            {
                base[PortPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.Connectors
{
    
    
    /// <summary>
    /// The ConnectionElement Configuration Element.
    /// </summary>
    public partial class ConnectionElement : ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Id.")]
        [ConfigurationProperty(IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[IdPropertyName]));
            }
            set
            {
                base[IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Name.")]
        [ConfigurationProperty(NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[NamePropertyName]));
            }
            set
            {
                base[NamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Code"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CodePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the Code.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Code.")]
        [ConfigurationProperty(CodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Code
        {
            get
            {
                return ((string)(base[CodePropertyName]));
            }
            set
            {
                base[CodePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Description"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DescriptionPropertyName = "description";
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Description.")]
        [ConfigurationProperty(DescriptionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Description
        {
            get
            {
                return ((string)(base[DescriptionPropertyName]));
            }
            set
            {
                base[DescriptionPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Version"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string VersionPropertyName = "version";
        
        /// <summary>
        /// Gets or sets the Version.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Version.")]
        [ConfigurationProperty(VersionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Version
        {
            get
            {
                return ((string)(base[VersionPropertyName]));
            }
            set
            {
                base[VersionPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Protocol"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProtocolPropertyName = "protocol";
        
        /// <summary>
        /// Gets or sets the Protocol.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Protocol.")]
        [ConfigurationProperty(ProtocolPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Protocol
        {
            get
            {
                return ((string)(base[ProtocolPropertyName]));
            }
            set
            {
                base[ProtocolPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="ConnectTimeOut"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectTimeOutPropertyName = "connectTimeOut";
        
        /// <summary>
        /// Gets or sets the ConnectTimeOut.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The ConnectTimeOut.")]
        [ConfigurationProperty(ConnectTimeOutPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int ConnectTimeOut
        {
            get
            {
                return ((int)(base[ConnectTimeOutPropertyName]));
            }
            set
            {
                base[ConnectTimeOutPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="FilePath"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FilePathPropertyName = "filePath";
        
        /// <summary>
        /// Gets or sets the FilePath.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The FilePath.")]
        [ConfigurationProperty(FilePathPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string FilePath
        {
            get
            {
                return ((string)(base[FilePathPropertyName]));
            }
            set
            {
                base[FilePathPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="SectionName"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SectionNamePropertyName = "sectionName";
        
        /// <summary>
        /// Gets or sets the SectionName.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The SectionName.")]
        [ConfigurationProperty(SectionNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string SectionName
        {
            get
            {
                return ((string)(base[SectionNamePropertyName]));
            }
            set
            {
                base[SectionNamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Local"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LocalPropertyName = "local";
        
        /// <summary>
        /// Gets or sets the Local.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Local.")]
        [ConfigurationProperty(LocalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual ConnectionInformationElement Local
        {
            get
            {
                return ((ConnectionInformationElement)(base[LocalPropertyName]));
            }
            set
            {
                base[LocalPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Remote"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RemotePropertyName = "remote";
        
        /// <summary>
        /// Gets or sets the Remote.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [Description("The Remote.")]
        [ConfigurationProperty(RemotePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual ConnectionInformationElement Remote
        {
            get
            {
                return ((ConnectionInformationElement)(base[RemotePropertyName]));
            }
            set
            {
                base[RemotePropertyName] = value;
            }
        }
    }
}
