//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations
{
    
    
    /// <summary>
    /// The TypeConfigurationSection Configuration Section.
    /// </summary>
    public partial class TypeConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        /// <summary>
        /// The XML name of the TypeConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypeConfigurationSectionSectionName = "typeConfigurationSection";
        
        /// <summary>
        /// Gets the TypeConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationSection Instance
        {
            get
            {
                return ((global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationSection.TypeConfigurationSectionSectionName)));
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationSection.XmlnsPropertyName]));
            }
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="TypeConfigurations"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypeConfigurationsPropertyName = "typeConfigurations";
        
        /// <summary>
        /// Gets or sets the TypeConfigurations.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TypeConfigurations.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationSection.TypeConfigurationsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElementCollection TypeConfigurations
        {
            get
            {
                return ((global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElementCollection)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationSection.TypeConfigurationsPropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationSection.TypeConfigurationsPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations
{
    
    
    /// <summary>
    /// A collection of TypeConfigurationElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElementCollection.TypeConfigurationElementPropertyName)]
    public partial class TypeConfigurationElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        /// <summary>
        /// The XML name of the individual <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypeConfigurationElementPropertyName = "typeConfigurationElement";

        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElementCollection.TypeConfigurationElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElementCollection.TypeConfigurationElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement();
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement this[int index]
        {
            get
            {
                return ((global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement this[object id]
        {
            get
            {
                return ((global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement)(base.BaseGet(id)));
            }
        }

        /// <summary>
        /// Adds the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="typeConfigurationElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement typeConfigurationElement)
        {
            base.BaseAdd(typeConfigurationElement);
        }

        /// <summary>
        /// Removes the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="typeConfigurationElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement typeConfigurationElement)
        {
            base.BaseRemove(this.GetElementKey(typeConfigurationElement));
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement GetItemAt(int index)
        {
            return ((global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement GetItemByKey(string id)
        {
            return ((global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement)(base.BaseGet(((object)(id)))));
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations
{
    
    
    /// <summary>
    /// The TypeConfigurationElement Configuration Element.
    /// </summary>
    public partial class TypeConfigurationElement : global::System.Configuration.ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.IdPropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Code"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CodePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the Code.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Code.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.CodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Code
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.CodePropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.CodePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.NamePropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.NamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::System.Configuration.TypeNameConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::System.Type Type
        {
            get
            {
                return ((global::System.Type)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.TypePropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.TypeConfigurations.TypeConfigurationElement.TypePropertyName] = value;
            }
        }
    }
}
