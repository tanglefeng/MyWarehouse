//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs
{
    
    
    /// <summary>
    /// The FileConfigSection Configuration Section.
    /// </summary>
    public partial class FileConfigSection : global::System.Configuration.ConfigurationSection
    {
        /// <summary>
        /// The XML name of the FileConfigSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FileConfigSectionSectionName = "fileConfigSection";
        
        /// <summary>
        /// Gets the FileConfigSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigSection Instance
        {
            get
            {
                return ((global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigSection.FileConfigSectionSectionName)));
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigSection.XmlnsPropertyName]));
            }
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="FileConfigs"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FileConfigsPropertyName = "fileConfigs";
        
        /// <summary>
        /// Gets or sets the FileConfigs.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FileConfigs.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigSection.FileConfigsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElementCollection FileConfigs
        {
            get
            {
                return ((global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElementCollection)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigSection.FileConfigsPropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigSection.FileConfigsPropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs
{
    
    
    /// <summary>
    /// The FileConfigElement Configuration Element.
    /// </summary>
    public partial class FileConfigElement : global::System.Configuration.ConfigurationElement
    {
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Id
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.IdPropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.IdPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.NamePropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.NamePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="Code"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CodePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the Code.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Code.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.CodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Code
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.CodePropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.CodePropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="FilePath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FilePathPropertyName = "filePath";
        
        /// <summary>
        /// Gets or sets the FilePath.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FilePath.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.FilePathPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string FilePath
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.FilePathPropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.FilePathPropertyName] = value;
            }
        }

        /// <summary>
        /// The XML name of the <see cref="SectionName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SectionNamePropertyName = "sectionName";
        
        /// <summary>
        /// Gets or sets the SectionName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SectionName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.SectionNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string SectionName
        {
            get
            {
                return ((string)(base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.SectionNamePropertyName]));
            }
            set
            {
                base[global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement.SectionNamePropertyName] = value;
            }
        }
    }
}
namespace Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs
{
    
    
    /// <summary>
    /// A collection of FileConfigElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElementCollection.FileConfigElementPropertyName)]
    public partial class FileConfigElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        /// <summary>
        /// The XML name of the individual <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FileConfigElementPropertyName = "fileConfigElement";

        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElementCollection.FileConfigElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElementCollection.FileConfigElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement();
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement this[int index]
        {
            get
            {
                return ((global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement this[object id]
        {
            get
            {
                return ((global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement)(base.BaseGet(id)));
            }
        }

        /// <summary>
        /// Adds the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="fileConfigElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement fileConfigElement)
        {
            base.BaseAdd(fileConfigElement);
        }

        /// <summary>
        /// Removes the specified <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="fileConfigElement">The <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement fileConfigElement)
        {
            base.BaseRemove(this.GetElementKey(fileConfigElement));
        }

        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement GetItemAt(int index)
        {
            return ((global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement GetItemByKey(string id)
        {
            return ((global::Kengic.Was.CrossCutting.ConfigurationSection.FileConfigs.FileConfigElement)(base.BaseGet(((object)(id)))));
        }

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
    }
}
